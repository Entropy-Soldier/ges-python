import GEEntity, GEPlayer, GEUtil, GEWeapon, GEAiConst, GEAiSched

def HintFlags( token_string ):
	'''
	@type token_string: str
	'''
	return int

def ActivityId( activity ):
	'''
	@type activity: str
	'''
	return int

def ScheduleID( name ):
	'''
	@type name: str
	'''
	return int

def TaskID( name ):
	'''
	@type name: str
	'''
	return int

def ConditionID( name ):
	'''
	@type name: str
	'''
	return int

class CNPC_GEBase( GEPlayer.CBaseCombatCharacter ):
	'''
	Placeholder definition
	'''

class CBaseNPC:
	def __init__( self, parent ):
		'''
		@type parent: CNPC_GEBase
		'''

	def GetNPC( self ):
		'''
		Returns the actual NPC instance, you will almost never
		need to use this, however.
		'''
		return CNPC_GEBase

	def GetPlayer( self ):
		'''
		If this NPC is a bot, it will be associated with a player
		instance. This returns that player instance so that you can
		check things like score, model, etc.
		'''
		return GEPlayer.CGEBotPlayer

	def GetSeenEntities( self ) -> []:
		return [GEEntity.CBaseEntity]

	def GetHeardSounds( self ) -> []:
		return [GEUtil.CSound]

	def GetHeldWeapons( self ) -> []:
		return [GEWeapon.CGEWeapon]

	def GetHeldWeaponIds( self ) -> []:
		return [int]

	def Say( self, msg ):
		'''Say something to the chat'''

	def SayTeam( self, msg ):
		'''Say something to my team'''

	# Pass-Through functions (to CNPC_GEBase)
	def HasWeapon( self, weapon ):
		'''
		Check if the NPC has the weapon in question.
		You can pass in a valid weapon id, weapon classname, 
		or weapon entity
		
		@type weapon: int, str, or GEWeapon.CGEWeapon
		'''
		return bool

	def GiveWeapon( self, classname ):
		return GEWeapon.CGEWeapon

	def GiveAmmo( self, amount, type ):
		'''
		@type amount: int
		@type type: str
		'''

	def GetAmmoCount( self, type ):
		'''
		@type type: str
		'''
		return int

	def GetMaxAmmoCount( self, type ):
		'''
		@type type: str
		'''
		return int

	def GetMaxHealth( self ):
		return int

	def GetArmor( self ):
		return int

	def GetMaxArmor( self ):
		return int

	def SetArmor( self, armor_value ):
		'''
		@type armor_value: int
		'''

	def GetEnemy( self ):
		return GEEntity.CBaseEntity

	def SetTarget( self, target ):
		'''
		@type target: GEEntity.CBaseEntity
		'''

	def SetTargetPos( self, position ):
		'''
		@type position: GEUtil.Vector
		'''

	def GetTarget( self ):
		return GEEntity.CBaseEntity

	def FindWeapon( self, distance ):
		'''
		@type distance: Vector
		'''
		return GEWeapon.CGEWeapon

	def AddCapabilities( self, capability ):
		'''
		@type capability: int
		'''

	def HasCapability( self, capability ):
		'''
		@type capability: int
		'''
		return bool

	def RemoveCapabilities( self, capability ):
		'''
		@type capability: int
		'''

	def ClearCapabilities( self ):
		return

	def AddRelationship( self, entity, disposition, priority ):
		'''
		@type entity: GEEntity.CBaseEntity
		@type disposition: GEAiConst.Disposition
		@type priority:int
		'''

	def RemoveRelationship( self, entity ):
		'''
		@type entity: GEEntity.CBaseEntity
		'''

	def AddClassRelationship( self, nClass, disposition, priority ):
		'''
		@type nClass: GEAiConst.Class
		@type disposition: GEAiConst.Disposition
		@type priority:int
		'''

	def GetRelationship( self, entity ) -> int:
		'''
		@type entity: GEEntity.CBaseEntity
		@return: Value from GEAiConst.Disposition
		'''
		return int

	def SetCondition( self, condition ):
		'''
		@type condition: GEAiCond.Cond
		'''

	def HasCondition( self, condition ):
		'''
		@type condition: GEAiCond.Cond
		'''
		return bool

	def ClearCondition( self, condition ):
		'''
		@type condition: GEAiCond.Cond
		'''

	def SetSchedule( self, schedule_id ):
		'''
		@type schedule_id: int
		'''
		return bool

	def ClearSchedule( self ):
		return

	def GetState( self ):
		'''
		@return: Value from GEAiConst.State
		'''
		return int

	def Remember( self, memory ):
		'''
		@type memory: int
		'''

	def Forget( self, memory ):
		'''
		@type memory: int
		'''

	def HasMemory( self, memory ):
		'''
		@type memory: int
		'''
		return bool

	def TaskComplete( self, ignore ):
		'''
		@type ignore: bool
		'''

	def TaskFail( self, fail_code ):
		'''
		@type fail_code: GEAiTasks.TaskFail or str
		'''

	def GetTeamNumber( self ):
		return int

	def IsSelected( self ):
		'''
		Useful for debugging ONLY, tells you if this NPC is selected using npc_select
		'''
		return bool

class ISchedule:
	name = str
	id_ = int
	
	def __init__( self ):
		return

	def Register( self ):
		'''
		Registers this schedule with the Ai System
		'''

class CAiManager:
	def __init__( self ):
		return

	def RegisterTask( self, name ):
		'''
		@type name: str
		'''
		return int

	def RegisterSchedule( self, schedule ):
		'''
		@type schedule: CBaseScedule
		'''
		return int

	def RegisterCondition( self, name ):
		'''
		@type name: str
		'''
		return int
